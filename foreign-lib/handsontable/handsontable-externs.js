var Handsontable = {
    "utils": {
        "Hooks": function () {},
        "Interval": {
            "create": function () {}
        },
        "GhostTable": function () {},
        "SamplesGenerator": {
            "SAMPLE_COUNT": {}
        },
        "localHooks": {
            "_localHooks": {},
            "addLocalHook": function () {},
            "runLocalHooks": function () {},
            "clearLocalHooks": function () {}
        }
    },
    "hooks": {
        "globalBucket": {
            "afterCellMetaReset": {},
            "afterChange": {},
            "afterChangesObserved": {},
            "afterContextMenuDefaultOptions": {},
            "afterContextMenuHide": {},
            "afterContextMenuShow": {},
            "afterCopyLimit": {},
            "afterCreateCol": {},
            "afterCreateRow": {},
            "afterDeselect": {},
            "afterDestroy": {},
            "afterDocumentKeyDown": {},
            "afterGetCellMeta": {},
            "afterGetColHeader": {},
            "afterGetRowHeader": {},
            "afterInit": {},
            "afterLoadData": {},
            "afterMomentumScroll": {},
            "afterOnCellCornerMouseDown": {},
            "afterOnCellMouseDown": {},
            "afterOnCellMouseOver": {},
            "afterRemoveCol": {},
            "afterRemoveRow": {},
            "afterRender": {},
            "beforeRenderer": {},
            "afterRenderer": {},
            "afterScrollHorizontally": {},
            "afterScrollVertically": {},
            "afterSelection": {},
            "afterSelectionByProp": {},
            "afterSelectionEnd": {},
            "afterSelectionEndByProp": {},
            "afterSetCellMeta": {},
            "afterUpdateSettings": {},
            "afterValidate": {},
            "beforeAutofill": {},
            "beforeCellAlignment": {},
            "beforeChange": {},
            "beforeChangeRender": {},
            "beforeDrawBorders": {},
            "beforeGetCellMeta": {},
            "beforeInit": {},
            "beforeInitWalkontable": {},
            "beforeKeyDown": {},
            "beforeOnCellMouseDown": {},
            "beforeOnCellMouseOver": {},
            "beforeRemoveCol": {},
            "beforeRemoveRow": {},
            "beforeRender": {},
            "beforeSetRangeStart": {},
            "beforeSetRangeEnd": {},
            "beforeTouchScroll": {},
            "beforeValidate": {},
            "construct": {},
            "init": {},
            "modifyCol": {},
            "unmodifyCol": {},
            "modifyColHeader": {},
            "modifyColWidth": {},
            "modifyRow": {},
            "modifyRowHeader": {},
            "modifyRowHeight": {},
            "persistentStateLoad": {},
            "persistentStateReset": {},
            "persistentStateSave": {},
            "beforeColumnSort": {},
            "afterColumnSort": {},
            "afterAutofillApplyValues": {},
            "modifyCopyableRange": {},
            "beforeColumnMove": {},
            "afterColumnMove": {},
            "beforeRowMove": {},
            "afterRowMove": {},
            "beforeColumnResize": {},
            "afterColumnResize": {},
            "beforeRowResize": {},
            "afterRowResize": {},
            "afterGetColumnHeaderRenderers": {},
            "afterGetRowHeaderRenderers": {},
            "beforeStretchingColumnWidth": {},
            "beforeFilter": {},
            "afterFilter": {},
            "modifyColumnHeaderHeight": {},
            "modifyTransformStart": {},
            "modifyTransformEnd": {},
            "afterIsMultipleSelection": {},
            "afterViewportRowCalculatorOverride": {},
            "afterViewportColumnCalculatorOverride": {}
        },
        "createEmptyBucket": function () {},
        "getBucket": function () {},
        "add": function () {},
        "once": function () {},
        "remove": function () {},
        "has": function () {},
        "run": function () {},
        "destroy": function () {},
        "register": function () {},
        "deregister": function () {},
        "isRegistered": function () {},
        "getRegistered": function () {}
    },
    "editors": {
        "registerEditor": function () {},
        "getEditor": function () {},
        "BaseEditor": function () {},
        "TextEditor": function () {},
        "HandsontableEditor": function () {},
        "AutocompleteEditor": {
            "sortByRelevance": function () {}
        },
        "CheckboxEditor": function () {},
        "DateEditor": function () {},
        "DropdownEditor": {
            "sortByRelevance": function () {}
        },
        "MobileEditor": function () {},
        "NumericEditor": function () {},
        "PasswordEditor": function () {},
        "SelectEditor": function () {}
    },
    "countEventManagerListeners": {},
    "eventManager": function () {},
    "EditorManager": function () {},
    "renderers": {
        "registerRenderer": function () {},
        "getRenderer": function () {},
        "BaseRenderer": function () {},
        "cellDecorator": function () {},
        "AutocompleteRenderer": function () {},
        "CheckboxRenderer": function () {},
        "HtmlRenderer": function () {},
        "NumericRenderer": function () {},
        "PasswordRenderer": function () {},
        "TextRenderer": function () {}
    },
    "TableView": function () {},
    "activeGuid": {},
    "Core": function () {},
    "DefaultSettings": function () {},
    "BaseRenderer": function () {},
    "EditorState": {
        "VIRGIN": {},
        "EDITING": {},
        "WAITING": {},
        "FINISHED": {}
    },
    "AutocompleteRenderer": function () {},
    "CheckboxRenderer": function () {},
    "HtmlRenderer": function () {},
    "NumericRenderer": function () {},
    "PasswordRenderer": function () {},
    "TextRenderer": function () {},
    "AutocompleteValidator": function () {},
    "DateValidator": function () {},
    "TimeValidator": function () {},
    "NumericValidator": function () {},
    "AutocompleteCell": {
        "editor": {
            "sortByRelevance": function () {}
        },
        "renderer": function () {},
        "validator": function () {}
    },
    "CheckboxCell": {
        "editor": function () {},
        "renderer": function () {}
    },
    "TextCell": {
        "editor": function () {},
        "renderer": function () {}
    },
    "NumericCell": {
        "editor": function () {},
        "renderer": function () {},
        "validator": function () {},
        "dataType": {}
    },
    "DateCell": {
        "editor": function () {},
        "validator": function () {},
        "renderer": function () {}
    },
    "TimeCell": {
        "editor": function () {},
        "validator": function () {},
        "renderer": function () {}
    },
    "HandsontableCell": {
        "editor": function () {},
        "renderer": function () {}
    },
    "PasswordCell": {
        "editor": function () {},
        "renderer": function () {},
        "copyable": {}
    },
    "DropdownCell": {
        "editor": {
            "sortByRelevance": function () {}
        },
        "renderer": function () {},
        "validator": function () {}
    },
    "cellTypes": {
        "text": {
            "editor": function () {},
            "renderer": function () {}
        },
        "date": {
            "editor": function () {},
            "validator": function () {},
            "renderer": function () {}
        },
        "time": {
            "editor": function () {},
            "validator": function () {},
            "renderer": function () {}
        },
        "numeric": {
            "editor": function () {},
            "renderer": function () {},
            "validator": function () {},
            "dataType": {}
        },
        "checkbox": {
            "editor": function () {},
            "renderer": function () {}
        },
        "autocomplete": {
            "editor": {
                "sortByRelevance": function () {}
            },
            "renderer": function () {},
            "validator": function () {}
        },
        "handsontable": {
            "editor": function () {},
            "renderer": function () {}
        },
        "password": {
            "editor": function () {},
            "renderer": function () {},
            "copyable": {}
        },
        "dropdown": {
            "editor": {
                "sortByRelevance": function () {}
            },
            "renderer": function () {},
            "validator": function () {}
        }
    },
    "cellLookup": {
        "validator": {
            "numeric": function () {},
            "autocomplete": function () {}
        }
    },
    "buildDate": {},
    "packageName": {},
    "version": {},
    "plugins": {
        "registerPlugin": function () {},
        "BasePlugin": function () {},
        "AutoColumnSize": {
            "CALCULATION_STEP": {},
            "SYNC_CALCULATION_LIMIT": {}
        },
        "AutoRowSize": {
            "CALCULATION_STEP": {},
            "SYNC_CALCULATION_LIMIT": {}
        },
        "ColumnSorting": function () {},
        "ObserveChanges": function () {},
        "Comments": function () {},
        "utils": {
            "Cursor": function () {}
        },
        "ContextMenu": {
            "DEFAULT_ITEMS": {},
            "SEPARATOR": {
                "name": {}
            }
        },
        "ContextMenuCopyPaste": function () {},
        "DragToScroll": function () {},
        "ManualColumnFreeze": function () {},
        "ManualColumnMove": function () {},
        "ManualColumnResize": function () {},
        "ManualRowMove": function () {},
        "ManualRowResize": function () {},
        "MultipleSelectionHandles": function () {},
        "TouchScroll": function () {}
    },
    "helper": {
        "to2dArray": function () {},
        "extendArray": function () {},
        "pivot": function () {},
        "arrayReduce": function () {},
        "arrayFilter": function () {},
        "arrayMap": function () {},
        "arrayEach": function () {},
        "arraySum": function () {},
        "arrayMax": function () {},
        "arrayMin": function () {},
        "arrayAvg": function () {},
        "arrayFlatten": function () {},
        "arrayUnique": function () {},
        "isIE8": function () {},
        "isIE9": function () {},
        "isSafari": function () {},
        "isChrome": function () {},
        "isMobileBrowser": function () {},
        "spreadsheetColumnLabel": function () {},
        "createSpreadsheetData": function () {},
        "createSpreadsheetObjectData": function () {},
        "createEmptySpreadsheetData": function () {},
        "translateRowsToColumns": function () {},
        "cellMethodLookupFactory": function () {},
        "getNormalizedDate": function () {},
        "requestAnimationFrame": function () {},
        "cancelAnimationFrame": function () {},
        "isTouchSupported": function () {},
        "isWebComponentSupportedNatively": function () {},
        "hasCaptionProblem": function () {},
        "getComparisonFunction": function () {},
        "isFunction": function () {},
        "proxy": function () {},
        "throttle": function () {},
        "throttleAfterHits": function () {},
        "debounce": function () {},
        "pipe": function () {},
        "partial": function () {},
        "curry": function () {},
        "curryRight": function () {},
        "stringify": function () {},
        "isDefined": function () {},
        "isUndefined": function () {},
        "isNumeric": function () {},
        "rangeEach": function () {},
        "rangeEachReverse": function () {},
        "valueAccordingPercent": function () {},
        "duckSchema": function () {},
        "inherit": function () {},
        "extend": function () {},
        "deepExtend": function () {},
        "deepClone": function () {},
        "clone": function () {},
        "mixin": function () {},
        "isObjectEquals": function () {},
        "isObject": function () {},
        "getPrototypeOf": function () {},
        "defineGetter": function () {},
        "objectEach": function () {},
        "getProperty": function () {},
        "deepObjectSize": function () {},
        "columnFactory": function () {},
        "toUpperCaseFirst": function () {},
        "startsWith": function () {},
        "endsWith": function () {},
        "equalsIgnoreCase": function () {},
        "randomString": function () {},
        "isPercentValue": function () {},
        "substitute": function () {},
        "padStart": function () {},
        "KEY_CODES": {
            "MOUSE_LEFT": {},
            "MOUSE_RIGHT": {},
            "MOUSE_MIDDLE": {},
            "BACKSPACE": {},
            "COMMA": {},
            "INSERT": {},
            "DELETE": {},
            "END": {},
            "ENTER": {},
            "ESCAPE": {},
            "CONTROL_LEFT": {},
            "COMMAND_LEFT": {},
            "COMMAND_RIGHT": {},
            "ALT": {},
            "HOME": {},
            "PAGE_DOWN": {},
            "PAGE_UP": {},
            "PERIOD": {},
            "SPACE": {},
            "SHIFT": {},
            "CAPS_LOCK": {},
            "TAB": {},
            "ARROW_RIGHT": {},
            "ARROW_LEFT": {},
            "ARROW_UP": {},
            "ARROW_DOWN": {},
            "F1": {},
            "F2": {},
            "F3": {},
            "F4": {},
            "F5": {},
            "F6": {},
            "F7": {},
            "F8": {},
            "F9": {},
            "F10": {},
            "F11": {},
            "F12": {},
            "A": {},
            "X": {},
            "C": {},
            "V": {}
        },
        "isPrintableChar": function () {},
        "isMetaKey": function () {},
        "isCtrlKey": function () {},
        "isKey": function () {}
    },
    "dom": {
        "closest": function () {},
        "closestDown": function () {},
        "isChildOf": function () {},
        "isChildOfWebComponentTable": function () {},
        "polymerWrap": function () {},
        "polymerUnwrap": function () {},
        "index": function () {},
        "overlayContainsElement": function () {},
        "hasClass": function () {},
        "addClass": function () {},
        "removeClass": function () {},
        "removeTextNodes": function () {},
        "empty": function () {},
        "HTML_CHARACTERS": {},
        "fastInnerHTML": function () {},
        "fastInnerText": function () {},
        "isVisible": function () {},
        "offset": function () {},
        "getWindowScrollTop": function () {},
        "getWindowScrollLeft": function () {},
        "getScrollTop": function () {},
        "getScrollLeft": function () {},
        "getScrollableElement": function () {},
        "getTrimmingContainer": function () {},
        "getStyle": function () {},
        "getComputedStyle": function () {},
        "outerWidth": function () {},
        "outerHeight": function () {},
        "innerHeight": function () {},
        "innerWidth": function () {},
        "addEvent": function () {},
        "removeEvent": function () {},
        "getCaretPosition": function () {},
        "getSelectionEndPosition": function () {},
        "getSelectionText": function () {},
        "setCaretPosition": function () {},
        "getScrollbarWidth": function () {},
        "hasVerticalScrollbar": function () {},
        "hasHorizontalScrollbar": function () {},
        "setOverlayPosition": function () {},
        "getCssTransform": function () {},
        "resetCssTransform": function () {},
        "isInput": function () {},
        "isOutsideInput": function () {},
        "stopImmediatePropagation": function () {},
        "isImmediatePropagationStopped": function () {},
        "stopPropagation": function () {},
        "pageX": function () {},
        "pageY": function () {},
        "isRightClick": function () {},
        "isLeftClick": function () {}
    },
    "Dom": {
        "closest": function () {},
        "closestDown": function () {},
        "isChildOf": function () {},
        "isChildOfWebComponentTable": function () {},
        "polymerWrap": function () {},
        "polymerUnwrap": function () {},
        "index": function () {},
        "overlayContainsElement": function () {},
        "hasClass": function () {},
        "addClass": function () {},
        "removeClass": function () {},
        "removeTextNodes": function () {},
        "empty": function () {},
        "HTML_CHARACTERS": {},
        "fastInnerHTML": function () {},
        "fastInnerText": function () {},
        "isVisible": function () {},
        "offset": function () {},
        "getWindowScrollTop": function () {},
        "getWindowScrollLeft": function () {},
        "getScrollTop": function () {},
        "getScrollLeft": function () {},
        "getScrollableElement": function () {},
        "getTrimmingContainer": function () {},
        "getStyle": function () {},
        "getComputedStyle": function () {},
        "outerWidth": function () {},
        "outerHeight": function () {},
        "innerHeight": function () {},
        "innerWidth": function () {},
        "addEvent": function () {},
        "removeEvent": function () {},
        "getCaretPosition": function () {},
        "getSelectionEndPosition": function () {},
        "getSelectionText": function () {},
        "setCaretPosition": function () {},
        "getScrollbarWidth": function () {},
        "hasVerticalScrollbar": function () {},
        "hasHorizontalScrollbar": function () {},
        "setOverlayPosition": function () {},
        "getCssTransform": function () {},
        "resetCssTransform": function () {},
        "isInput": function () {},
        "isOutsideInput": function () {},
        "stopImmediatePropagation": function () {},
        "isImmediatePropagationStopped": function () {},
        "stopPropagation": function () {},
        "pageX": function () {},
        "pageY": function () {},
        "isRightClick": function () {},
        "isLeftClick": function () {}
    },
    "Autofill": function () {},
    "CustomBorders": function () {},
    "MergeCells": function () {},
    "Search": {
        "DEFAULT_CALLBACK": function () {},
        "DEFAULT_QUERY_METHOD": function () {},
        "DEFAULT_SEARCH_RESULT_CLASS": {},
        "global": {
            "getDefaultCallback": function () {},
            "setDefaultCallback": function () {},
            "getDefaultQueryMethod": function () {},
            "setDefaultQueryMethod": function () {},
            "getDefaultSearchResultClass": function () {},
            "setDefaultSearchResultClass": function () {}
        }
    },
    "SearchCellDecorator": function () {},
    "UndoRedo": {
        "Action": function () {},
        "ChangeAction": function () {},
        "CreateRowAction": function () {},
        "RemoveRowAction": function () {},
        "CreateColumnAction": function () {},
        "CellAlignmentAction": function () {},
        "RemoveColumnAction": function () {},
        "FiltersAction": function () {}
    }
};
Handsontable.utils.Hooks.prototype = {
    "createEmptyBucket": function () {},
    "getBucket": function () {},
    "add": function () {},
    "once": function () {},
    "remove": function () {},
    "has": function () {},
    "run": function () {},
    "destroy": function () {},
    "register": function () {},
    "deregister": function () {},
    "isRegistered": function () {},
    "getRegistered": function () {}
};
Handsontable.utils.Interval.prototype = {
    "start": function () {},
    "stop": function () {},
    "__callback": function () {}
};
Handsontable.utils.GhostTable.prototype = {
    "addRow": function () {},
    "addColumnHeadersRow": function () {},
    "addColumn": function () {},
    "getHeights": function () {},
    "getWidths": function () {},
    "setSettings": function () {},
    "setSetting": function () {},
    "getSettings": function () {},
    "getSetting": function () {},
    "createColGroupsCol": function () {},
    "createRow": function () {},
    "createColumnHeadersRow": function () {},
    "createCol": function () {},
    "clean": function () {},
    "injectTable": function () {},
    "removeTable": function () {},
    "createColElement": function () {},
    "createTable": function () {},
    "createContainer": function () {},
    "isVertical": function () {},
    "isHorizontal": function () {}
};
Handsontable.utils.SamplesGenerator.prototype = {
    "getSampleCount": function () {},
    "generateRowSamples": function () {},
    "generateColumnSamples": function () {},
    "generateSamples": function () {},
    "generateSample": function () {}
};
Handsontable.editors.BaseEditor.prototype = {
    "_fireCallbacks": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.TextEditor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.HandsontableEditor.prototype = {
    "constructor": function () {},
    "createElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "assignHooks": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.AutocompleteEditor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "createElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "queryChoices": function () {},
    "updateChoicesList": function () {},
    "flipDropdownIfNeeded": function () {},
    "flipDropdown": function () {},
    "unflipDropdown": function () {},
    "updateDropdownHeight": function () {},
    "finishEditing": function () {},
    "highlightBestMatchingChoice": function () {},
    "getDropdownHeight": function () {},
    "allowKeyEventPropagation": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "assignHooks": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.CheckboxEditor.prototype = {
    "beginEditing": function () {},
    "finishEditing": function () {},
    "init": function () {},
    "open": function () {},
    "close": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "focus": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.DateEditor.prototype = {
    "init": function () {},
    "createElements": function () {},
    "destroyElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "finishEditing": function () {},
    "showDatepicker": function () {},
    "hideDatepicker": function () {},
    "getDatePickerConfig": function () {},
    "constructor": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "focus": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.DropdownEditor.prototype = {
    "prepare": function () {},
    "constructor": function () {},
    "init": function () {},
    "createElements": function () {},
    "open": function () {},
    "close": function () {},
    "queryChoices": function () {},
    "updateChoicesList": function () {},
    "flipDropdownIfNeeded": function () {},
    "flipDropdown": function () {},
    "unflipDropdown": function () {},
    "updateDropdownHeight": function () {},
    "finishEditing": function () {},
    "highlightBestMatchingChoice": function () {},
    "getDropdownHeight": function () {},
    "allowKeyEventPropagation": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "assignHooks": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.MobileEditor.prototype = {
    "constructor": function () {},
    "valueChanged": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "createElements": function () {},
    "onBeforeKeyDown": function () {},
    "open": function () {},
    "focus": function () {},
    "close": function () {},
    "scrollToView": function () {},
    "hideCellPointer": function () {},
    "updateEditorPosition": function () {},
    "updateEditorData": function () {},
    "prepareAndSave": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.NumericEditor.prototype = {
    "beginEditing": function () {},
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.PasswordEditor.prototype = {
    "createElements": function () {},
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.editors.SelectEditor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "registerHooks": function () {},
    "prepare": function () {},
    "prepareOptions": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "refreshDimensions": function () {},
    "getEditedCell": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.TableView.prototype = {
    "isTextSelectionAllowed": function () {},
    "isSelectedOnlyCell": function () {},
    "isCellEdited": function () {},
    "beforeRender": function () {},
    "onDraw": function () {},
    "render": function () {},
    "getCellAtCoords": function () {},
    "scrollViewport": function () {},
    "appendRowHeader": function () {},
    "appendColHeader": function () {},
    "updateCellHeader": function () {},
    "maximumVisibleElementWidth": function () {},
    "maximumVisibleElementHeight": function () {},
    "mainViewIsActive": function () {},
    "destroy": function () {}
};
Handsontable.DefaultSettings.prototype = {
    "data": function () {},
    "dataSchema": function () {},
    "width": function () {},
    "height": function () {},
    "startRows": function () {},
    "startCols": function () {},
    "rowHeaders": function () {},
    "colHeaders": function () {},
    "colWidths": function () {},
    "rowHeights": function () {},
    "columns": function () {},
    "cells": function () {},
    "cell": function () {},
    "comments": function () {},
    "customBorders": function () {},
    "minRows": function () {},
    "minCols": function () {},
    "maxRows": function () {},
    "maxCols": function () {},
    "minSpareRows": function () {},
    "minSpareCols": function () {},
    "allowInsertRow": function () {},
    "allowInsertColumn": function () {},
    "allowRemoveRow": function () {},
    "allowRemoveColumn": function () {},
    "multiSelect": function () {},
    "fillHandle": function () {},
    "fixedRowsTop": function () {},
    "fixedRowsBottom": function () {},
    "fixedColumnsLeft": function () {},
    "outsideClickDeselects": function () {},
    "enterBeginsEditing": function () {},
    "enterMoves": function () {},
    "tabMoves": function () {},
    "autoWrapRow": function () {},
    "autoWrapCol": function () {},
    "copyRowsLimit": function () {},
    "copyColsLimit": function () {},
    "pasteMode": function () {},
    "persistentState": function () {},
    "currentRowClassName": function () {},
    "currentColClassName": function () {},
    "className": function () {},
    "tableClassName": function () {},
    "stretchH": function () {},
    "isEmptyRow": function () {},
    "isEmptyCol": function () {},
    "observeDOMVisibility": function () {},
    "allowInvalid": function () {},
    "allowEmpty": function () {},
    "invalidCellClassName": function () {},
    "placeholder": function () {},
    "placeholderCellClassName": function () {},
    "readOnlyCellClassName": function () {},
    "renderer": function () {},
    "commentedCellClassName": function () {},
    "fragmentSelection": function () {},
    "readOnly": function () {},
    "skipColumnOnPaste": function () {},
    "search": function () {},
    "type": function () {},
    "copyable": function () {},
    "editor": function () {},
    "autoComplete": function () {},
    "visibleRows": function () {},
    "trimDropdown": function () {},
    "debug": function () {},
    "wordWrap": function () {},
    "noWordWrapClassName": function () {},
    "contextMenu": function () {},
    "contextMenuCopyPaste": function () {},
    "copyPaste": function () {},
    "undo": function () {},
    "columnSorting": function () {},
    "manualColumnMove": function () {},
    "manualColumnResize": function () {},
    "manualRowMove": function () {},
    "manualRowResize": function () {},
    "mergeCells": function () {},
    "viewportRowRenderingOffset": function () {},
    "viewportColumnRenderingOffset": function () {},
    "validator": function () {},
    "disableVisualSelection": function () {},
    "sortIndicator": function () {},
    "manualColumnFreeze": function () {},
    "trimWhitespace": function () {},
    "settings": function () {},
    "source": function () {},
    "title": function () {},
    "checkedTemplate": function () {},
    "uncheckedTemplate": function () {},
    "label": function () {},
    "format": function () {},
    "language": function () {},
    "selectOptions": function () {},
    "autoColumnSize": function () {},
    "autoRowSize": function () {},
    "dateFormat": function () {},
    "correctFormat": function () {},
    "defaultDate": function () {},
    "strict": function () {},
    "renderAllRows": function () {},
    "preventOverflow": function () {},
    "bindRowsWithHeaders": function () {},
    "collapsibleColumns": function () {},
    "columnSummary": function () {},
    "dropdownMenu": function () {},
    "filters": function () {},
    "ganttChart": function () {},
    "headerTooltips": function () {},
    "hiddenColumns": function () {},
    "hiddenRows": function () {},
    "nestedHeaders": function () {},
    "trimRows": function () {},
    "rowHeaderWidth": function () {},
    "columnHeaderHeight": function () {},
    "observeChanges": function () {},
    "sortFunction": function () {},
    "sortByRelevance": function () {},
    "filter": function () {},
    "filteringCaseSensitive": function () {}
};
Handsontable.AutocompleteCell.editor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "createElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "queryChoices": function () {},
    "updateChoicesList": function () {},
    "flipDropdownIfNeeded": function () {},
    "flipDropdown": function () {},
    "unflipDropdown": function () {},
    "updateDropdownHeight": function () {},
    "finishEditing": function () {},
    "highlightBestMatchingChoice": function () {},
    "getDropdownHeight": function () {},
    "allowKeyEventPropagation": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "assignHooks": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.CheckboxCell.editor.prototype = {
    "beginEditing": function () {},
    "finishEditing": function () {},
    "init": function () {},
    "open": function () {},
    "close": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "focus": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.TextCell.editor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.NumericCell.editor.prototype = {
    "beginEditing": function () {},
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.DateCell.editor.prototype = {
    "init": function () {},
    "createElements": function () {},
    "destroyElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "finishEditing": function () {},
    "showDatepicker": function () {},
    "hideDatepicker": function () {},
    "getDatePickerConfig": function () {},
    "constructor": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "focus": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.TimeCell.editor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.HandsontableCell.editor.prototype = {
    "constructor": function () {},
    "createElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "assignHooks": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.PasswordCell.editor.prototype = {
    "createElements": function () {},
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.DropdownCell.editor.prototype = {
    "prepare": function () {},
    "constructor": function () {},
    "init": function () {},
    "createElements": function () {},
    "open": function () {},
    "close": function () {},
    "queryChoices": function () {},
    "updateChoicesList": function () {},
    "flipDropdownIfNeeded": function () {},
    "flipDropdown": function () {},
    "unflipDropdown": function () {},
    "updateDropdownHeight": function () {},
    "finishEditing": function () {},
    "highlightBestMatchingChoice": function () {},
    "getDropdownHeight": function () {},
    "allowKeyEventPropagation": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "assignHooks": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.text.editor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.date.editor.prototype = {
    "init": function () {},
    "createElements": function () {},
    "destroyElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "finishEditing": function () {},
    "showDatepicker": function () {},
    "hideDatepicker": function () {},
    "getDatePickerConfig": function () {},
    "constructor": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "focus": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.time.editor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.numeric.editor.prototype = {
    "beginEditing": function () {},
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "createElements": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.checkbox.editor.prototype = {
    "beginEditing": function () {},
    "finishEditing": function () {},
    "init": function () {},
    "open": function () {},
    "close": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "focus": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.autocomplete.editor.prototype = {
    "constructor": function () {},
    "init": function () {},
    "createElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "queryChoices": function () {},
    "updateChoicesList": function () {},
    "flipDropdownIfNeeded": function () {},
    "flipDropdown": function () {},
    "unflipDropdown": function () {},
    "updateDropdownHeight": function () {},
    "finishEditing": function () {},
    "highlightBestMatchingChoice": function () {},
    "getDropdownHeight": function () {},
    "allowKeyEventPropagation": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "assignHooks": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.handsontable.editor.prototype = {
    "constructor": function () {},
    "createElements": function () {},
    "prepare": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "assignHooks": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.password.editor.prototype = {
    "createElements": function () {},
    "constructor": function () {},
    "init": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "open": function () {},
    "close": function () {},
    "focus": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "prepare": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "beginEditing": function () {},
    "finishEditing": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.cellTypes.dropdown.editor.prototype = {
    "prepare": function () {},
    "constructor": function () {},
    "init": function () {},
    "createElements": function () {},
    "open": function () {},
    "close": function () {},
    "queryChoices": function () {},
    "updateChoicesList": function () {},
    "flipDropdownIfNeeded": function () {},
    "flipDropdown": function () {},
    "unflipDropdown": function () {},
    "updateDropdownHeight": function () {},
    "finishEditing": function () {},
    "highlightBestMatchingChoice": function () {},
    "getDropdownHeight": function () {},
    "allowKeyEventPropagation": function () {},
    "focus": function () {},
    "beginEditing": function () {},
    "assignHooks": function () {},
    "getValue": function () {},
    "setValue": function () {},
    "getEditedCell": function () {},
    "refreshDimensions": function () {},
    "bindEvents": function () {},
    "destroy": function () {},
    "_fireCallbacks": function () {},
    "extend": function () {},
    "saveValue": function () {},
    "cancelChanges": function () {},
    "discardEditor": function () {},
    "enableFullEditMode": function () {},
    "isInFullEditMode": function () {},
    "isOpened": function () {},
    "isWaiting": function () {},
    "checkEditorSection": function () {}
};
Handsontable.plugins.BasePlugin.prototype = {
    "init": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {},
    "destroy": function () {}
};
Handsontable.plugins.AutoColumnSize.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "calculateColumnsWidth": function () {},
    "calculateAllColumnsWidth": function () {},
    "recalculateAllColumnsWidth": function () {},
    "getSyncCalculationLimit": function () {},
    "getColumnWidth": function () {},
    "getFirstVisibleColumn": function () {},
    "getLastVisibleColumn": function () {},
    "clearCache": function () {},
    "isNeedRecalculate": function () {},
    "onBeforeRender": function () {},
    "onAfterLoadData": function () {},
    "onBeforeChange": function () {},
    "onBeforeColumnResize": function () {},
    "destroy": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {}
};
Handsontable.plugins.AutoRowSize.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "calculateRowsHeight": function () {},
    "calculateAllRowsHeight": function () {},
    "recalculateAllRowsHeight": function () {},
    "getSyncCalculationLimit": function () {},
    "getRowHeight": function () {},
    "getColumnHeaderHeight": function () {},
    "getFirstVisibleRow": function () {},
    "getLastVisibleRow": function () {},
    "clearCache": function () {},
    "clearCacheByRange": function () {},
    "isNeedRecalculate": function () {},
    "onBeforeRender": function () {},
    "onBeforeRowMove": function () {},
    "onBeforeRowResize": function () {},
    "onAfterLoadData": function () {},
    "onBeforeChange": function () {},
    "destroy": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {}
};
Handsontable.plugins.ColumnSorting.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "onAfterUpdateSettings": function () {},
    "sortBySettings": function () {},
    "setSortingColumn": function () {},
    "sortByColumn": function () {},
    "saveSortingState": function () {},
    "loadSortingState": function () {},
    "updateOrderClass": function () {},
    "bindColumnSortingAfterClick": function () {},
    "enableObserveChangesPlugin": function () {},
    "defaultSort": function () {},
    "dateSort": function () {},
    "numericSort": function () {},
    "sort": function () {},
    "updateSortIndicator": function () {},
    "translateRow": function () {},
    "untranslateRow": function () {},
    "getColHeader": function () {},
    "isSorted": function () {},
    "afterCreateRow": function () {},
    "afterRemoveRow": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {},
    "destroy": function () {}
};
Handsontable.plugins.ObserveChanges.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "onDataChange": function () {},
    "onAfterTableAlter": function () {},
    "onAfterLoadData": function () {},
    "destroy": function () {},
    "_exposePublicApi": function () {},
    "_deletePublicApi": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {}
};
Handsontable.plugins.Comments.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "registerListeners": function () {},
    "setRange": function () {},
    "clearRange": function () {},
    "targetIsCellWithComment": function () {},
    "targetIsCommentTextArea": function () {},
    "saveComment": function () {},
    "saveCommentAtCell": function () {},
    "removeComment": function () {},
    "removeCommentAtCell": function () {},
    "show": function () {},
    "showAtCell": function () {},
    "hide": function () {},
    "refreshEditorPosition": function () {},
    "onMouseDown": function () {},
    "onMouseOver": function () {},
    "onMouseMove": function () {},
    "onMouseUp": function () {},
    "onAfterRenderer": function () {},
    "onEditorBlur": function () {},
    "checkSelectionCommentsConsistency": function () {},
    "onContextMenuAddComment": function () {},
    "onContextMenuRemoveComment": function () {},
    "addToContextMenu": function () {},
    "destroy": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {}
};
Handsontable.plugins.utils.Cursor.prototype = {
    "getSourceType": function () {},
    "fitsAbove": function () {},
    "fitsBelow": function () {},
    "fitsOnRight": function () {},
    "fitsOnLeft": function () {}
};
Handsontable.plugins.ContextMenu.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "updatePlugin": function () {},
    "disablePlugin": function () {},
    "registerEvents": function () {},
    "open": function () {},
    "close": function () {},
    "executeCommand": function () {},
    "onContextMenu": function () {},
    "onMenuAfterOpen": function () {},
    "onMenuAfterClose": function () {},
    "destroy": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {}
};
Handsontable.plugins.ContextMenuCopyPaste.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "registerEvents": function () {},
    "getCopyValue": function () {},
    "onAfterContextMenuDefaultOptions": function () {},
    "onAfterContextMenuShow": function () {},
    "removeCurrentClass": function () {},
    "removeZeroClipboardClass": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {},
    "destroy": function () {}
};
Handsontable.plugins.DragToScroll.prototype = {
    "setBoundaries": function () {},
    "setCallback": function () {},
    "check": function () {}
};
Handsontable.plugins.ManualColumnFreeze.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "init": function () {},
    "getManualColumnMovePlugin": function () {},
    "onModifyCol": function () {},
    "addContextMenuEntry": function () {},
    "freezeColumn": function () {},
    "unfreezeColumn": function () {},
    "addFixedColumn": function () {},
    "removeFixedColumn": function () {},
    "getBestColumnReturnPosition": function () {},
    "getVisibleColumnIndex": function () {},
    "getLogicalColumnIndex": function () {},
    "changeColumnPositions": function () {},
    "disablePlugin": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {},
    "destroy": function () {}
};
Handsontable.plugins.ManualColumnMove.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "updatePlugin": function () {},
    "disablePlugin": function () {},
    "registerEvents": function () {},
    "unregisterEvents": function () {},
    "saveManualColumnPositions": function () {},
    "loadManualColumnPositions": function () {},
    "completeSettingsArray": function () {},
    "setupHandlePosition": function () {},
    "refreshHandlePosition": function () {},
    "setupGuidePosition": function () {},
    "refreshGuidePosition": function () {},
    "hideHandleAndGuide": function () {},
    "checkColumnHeader": function () {},
    "createPositionData": function () {},
    "getTHFromTargetElement": function () {},
    "changeColumnPositions": function () {},
    "getVisibleColumnIndex": function () {},
    "getLogicalColumnIndex": function () {},
    "onMouseOver": function () {},
    "onMouseDown": function () {},
    "onMouseMove": function () {},
    "onMouseUp": function () {},
    "onModifyCol": function () {},
    "onUnmodifyCol": function () {},
    "onAfterRemoveCol": function () {},
    "onAfterCreateCol": function () {},
    "onInit": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "destroy": function () {}
};
Handsontable.plugins.ManualColumnResize.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "updatePlugin": function () {},
    "disablePlugin": function () {},
    "saveManualColumnWidths": function () {},
    "loadManualColumnWidths": function () {},
    "setupHandlePosition": function () {},
    "refreshHandlePosition": function () {},
    "setupGuidePosition": function () {},
    "refreshGuidePosition": function () {},
    "hideHandleAndGuide": function () {},
    "checkIfColumnHeader": function () {},
    "getTHFromTargetElement": function () {},
    "onMouseOver": function () {},
    "afterMouseDownTimeout": function () {},
    "onMouseDown": function () {},
    "onMouseMove": function () {},
    "onMouseUp": function () {},
    "bindEvents": function () {},
    "setManualSize": function () {},
    "clearManualSize": function () {},
    "onModifyColWidth": function () {},
    "onBeforeStretchingColumnWidth": function () {},
    "onBeforeColumnResize": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "destroy": function () {}
};
Handsontable.plugins.ManualRowMove.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "updatePlugin": function () {},
    "disablePlugin": function () {},
    "registerEvents": function () {},
    "unregisterEvents": function () {},
    "saveManualRowPositions": function () {},
    "loadManualRowPositions": function () {},
    "completeSettingsArray": function () {},
    "setupHandlePosition": function () {},
    "refreshHandlePosition": function () {},
    "setupGuidePosition": function () {},
    "refreshGuidePosition": function () {},
    "hideHandleAndGuide": function () {},
    "checkRowHeader": function () {},
    "createPositionData": function () {},
    "getTHFromTargetElement": function () {},
    "changeRowPositions": function () {},
    "getVisibleRowIndex": function () {},
    "getLogicalRowIndex": function () {},
    "onMouseOver": function () {},
    "onMouseDown": function () {},
    "onMouseMove": function () {},
    "onMouseUp": function () {},
    "onModifyRow": function () {},
    "onAfterRemoveRow": function () {},
    "onAfterCreateRow": function () {},
    "onInit": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "destroy": function () {}
};
Handsontable.plugins.ManualRowResize.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "updatePlugin": function () {},
    "disablePlugin": function () {},
    "saveManualRowHeights": function () {},
    "loadManualRowHeights": function () {},
    "setupHandlePosition": function () {},
    "refreshHandlePosition": function () {},
    "setupGuidePosition": function () {},
    "refreshGuidePosition": function () {},
    "hideHandleAndGuide": function () {},
    "checkIfRowHeader": function () {},
    "getTHFromTargetElement": function () {},
    "onMouseOver": function () {},
    "afterMouseDownTimeout": function () {},
    "onMouseDown": function () {},
    "onMouseMove": function () {},
    "onMouseUp": function () {},
    "bindEvents": function () {},
    "setManualSize": function () {},
    "onModifyRowHeight": function () {},
    "init": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "destroy": function () {}
};
Handsontable.plugins.MultipleSelectionHandles.prototype = {
    "isEnabled": function () {},
    "enablePlugin": function () {},
    "registerListeners": function () {},
    "getCurrentRangeCoords": function () {},
    "isDragged": function () {},
    "init": function () {},
    "disablePlugin": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {},
    "destroy": function () {}
};
Handsontable.plugins.TouchScroll.prototype = {
    "afterInit": function () {},
    "onAfterUpdateSettings": function () {},
    "registerEvents": function () {},
    "onBeforeTouchScroll": function () {},
    "onAfterMomentumScroll": function () {},
    "init": function () {},
    "enablePlugin": function () {},
    "disablePlugin": function () {},
    "addHook": function () {},
    "removeHooks": function () {},
    "clearHooks": function () {},
    "callOnPluginsReady": function () {},
    "onAfterPluginsInitialized": function () {},
    "onUpdateSettings": function () {},
    "updatePlugin": function () {},
    "destroy": function () {}
};
Handsontable.Autofill.prototype = {
    "init": function () {},
    "disable": function () {},
    "selectAdjacent": function () {},
    "apply": function () {},
    "showBorder": function () {},
    "checkIfNewRowNeeded": function () {}
};
Handsontable.MergeCells.prototype = {
    "canMergeRange": function () {},
    "mergeRange": function () {},
    "mergeOrUnmergeSelection": function () {},
    "mergeSelection": function () {},
    "unmergeSelection": function () {},
    "applySpanProperties": function () {},
    "modifyTransform": function () {},
    "shiftCollection": function () {}
};
Handsontable.UndoRedo.prototype = {
    "done": function () {},
    "undo": function () {},
    "redo": function () {},
    "isUndoAvailable": function () {},
    "isRedoAvailable": function () {},
    "clear": function () {}
};
Handsontable.UndoRedo.Action.prototype = {
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.ChangeAction.prototype = {
    "constructor": function () {},
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.CreateRowAction.prototype = {
    "constructor": function () {},
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.RemoveRowAction.prototype = {
    "constructor": function () {},
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.CreateColumnAction.prototype = {
    "constructor": function () {},
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.CellAlignmentAction.prototype = {
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.RemoveColumnAction.prototype = {
    "constructor": function () {},
    "undo": function () {},
    "redo": function () {}
};
Handsontable.UndoRedo.FiltersAction.prototype = {
    "constructor": function () {},
    "undo": function () {},
    "redo": function () {}
};